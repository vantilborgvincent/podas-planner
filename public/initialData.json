// Project Structure for PODAS Planner
/*
podas-planner/
├── app/
│   ├── layout.tsx
│   ├── page.tsx
│   ├── globals.css
│   └── providers.tsx
├── components/
│   ├── ui/ (shadcn components)
│   ├── calendar-view.tsx
│   ├── gantt-view.tsx
│   ├── milestone-panel.tsx
│   ├── task-form.tsx
│   ├── milestone-form.tsx
│   ├── constraints-checker.tsx
│   └── theme-toggle.tsx
├── lib/
│   ├── store.ts (Zustand store)
│   ├── types.ts
│   ├── constraints.ts
│   ├── export.ts
│   └── utils.ts
├── public/
│   ├── podas-logo.svg
│   └── initialData.json
└── package.json
*/

// First, let's define our types in lib/types.ts
// lib/types.ts
export interface Task {
  id: string;
  title: string;
  assignee: "Vincent" | "Jannes" | "Joy" | "Partners";
  date: string;
  start: string;
  end: string;
  tags: ("Physical BD" | "Cold-call" | "Marketing" | "Build" | "Admin" | "Content"
        | "Networking" | "Tooling" | "Referral" | "Audit")[];
  notes?: string;
  rrule?: string;
}

export interface Milestone {
  id: string;
  title: string;
  targetDate: string;
  kpi: string;
  description: string;
}

export interface ConstraintWarning {
  message: string;
  task: Task;
  type: 'vincent-evenings' | 'jannes-hours' | 'jannes-late-evenings' | 'physical-bd-days';
}

// Store implementation with Zustand
// lib/store.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { Task, Milestone, ConstraintWarning } from './types';
import { v4 as uuidv4 } from 'uuid';
import { checkConstraints } from './constraints';

interface PlannerState {
  tasks: Task[];
  milestones: Milestone[];
  warnings: ConstraintWarning[];
  view: 'day' | 'week' | 'month' | 'timeline';
  
  // Actions
  addTask: (task: Omit<Task, 'id'>) => void;
  updateTask: (id: string, updates: Partial<Task>) => void;
  deleteTask: (id: string) => void;
  
  addMilestone: (milestone: Omit<Milestone, 'id'>) => void;
  updateMilestone: (id: string, updates: Partial<Milestone>) => void;
  deleteMilestone: (id: string) => void;
  
  setView: (view: 'day' | 'week' | 'month' | 'timeline') => void;
  
  importData: (data: { tasks: Task[], milestones: Milestone[] }) => void;
  exportData: () => { tasks: Task[], milestones: Milestone[] };
  
  dismissWarning: (taskId: string, type: string) => void;
}

export const usePlannerStore = create<PlannerState>()(
  persist(
    (set, get) => ({
      tasks: [],
      milestones: [],
      warnings: [],
      view: 'week',
      
      addTask: (taskData) => {
        const task = { ...taskData, id: uuidv4() };
        set((state) => {
          const newTasks = [...state.tasks, task];
          return { 
            tasks: newTasks,
            warnings: checkConstraints(newTasks)
          };
        });
      },
      
      updateTask: (id, updates) => {
        set((state) => {
          const newTasks = state.tasks.map(task => 
            task.id === id ? { ...task, ...updates } : task
          );
          return { 
            tasks: newTasks,
            warnings: checkConstraints(newTasks)
          };
        });
      },
      
      deleteTask: (id) => {
        set((state) => {
          const newTasks = state.tasks.filter(task => task.id !== id);
          return { 
            tasks: newTasks,
            warnings: checkConstraints(newTasks)
          };
        });
      },
      
      addMilestone: (milestoneData) => {
        const milestone = { ...milestoneData, id: uuidv4() };
        set((state) => ({
          milestones: [...state.milestones, milestone]
        }));
      },
      
      updateMilestone: (id, updates) => {
        set((state) => ({
          milestones: state.milestones.map(milestone => 
            milestone.id === id ? { ...milestone, ...updates } : milestone
          )
        }));
      },
      
      deleteMilestone: (id) => {
        set((state) => ({
          milestones: state.milestones.filter(milestone => milestone.id !== id)
        }));
      },
      
      setView: (view) => {
        set({ view });
      },
      
      importData: (data) => {
        set({
          tasks: data.tasks,
          milestones: data.milestones,
          warnings: checkConstraints(data.tasks)
        });
      },
      
      exportData: () => {
        const { tasks, milestones } = get();
        return { tasks, milestones };
      },
      
      dismissWarning: (taskId, type) => {
        set((state) => ({
          warnings: state.warnings.filter(warning => 
            !(warning.task.id === taskId && warning.type === type)
          )
        }));
      }
    }),
    {
      name: 'podas-planner-storage',
      partialize: (state) => ({ 
        tasks: state.tasks,
        milestones: state.milestones,
        view: state.view
      }),
    }
  )
);

// Constraints checker implementation
// lib/constraints.ts
import { Task, ConstraintWarning } from './types';
import { isSameWeek, parseISO, format } from 'date-fns';

export function checkConstraints(tasks: Task[]): ConstraintWarning[] {
  const warnings: ConstraintWarning[] = [];
  
  // Group tasks by week for weekly constraints
  const tasksByWeek = tasks.reduce<Record<string, Task[]>>((acc, task) => {
    const weekKey = format(parseISO(task.date), 'yyyy-ww');
    if (!acc[weekKey]) {
      acc[weekKey] = [];
    }
    acc[weekKey].push(task);
    return acc;
  }, {});
  
  // Check each week's constraints
  Object.values(tasksByWeek).forEach(weekTasks => {
    // 1. Vincent: >5 long work nights per week
    const vincentLateNights = weekTasks.filter(task => 
      task.assignee === 'Vincent' && 
      parseInt(task.end.split(':')[0]) >= 19
    );
    
    if (vincentLateNights.length > 5) {
      vincentLateNights.forEach(task => {
        warnings.push({
          message: 'Vincent has >5 long work nights this week (wants 2 evenings free)',
          task,
          type: 'vincent-evenings'
        });
      });
    }
    
    // 2. Jannes: >15 hours per week
    const jannesTasks = weekTasks.filter(task => task.assignee === 'Jannes');
    const jannesHours = jannesTasks.reduce((total, task) => {
      const startHour = parseInt(task.start.split(':')[0]);
      const startMin = parseInt(task.start.split(':')[1]);
      const endHour = parseInt(task.end.split(':')[0]);
      const endMin = parseInt(task.end.split(':')[1]);
      
      const hours = (endHour + endMin/60) - (startHour + startMin/60);
      return total + hours;
    }, 0);
    
    if (jannesHours > 15) {
      jannesTasks.forEach(task => {
        warnings.push({
          message: `Jannes is scheduled for ${jannesHours.toFixed(1)} hours this week (>15 hour limit)`,
          task,
          type: 'jannes-hours'
        });
      });
    }
    
    // 3. Jannes: weekday evenings after 21h
    const jannesLateEvenings = weekTasks.filter(task => {
      const date = parseISO(task.date);
      const dayOfWeek = date.getDay();
      const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5; // Monday to Friday
      const endHour = parseInt(task.end.split(':')[0]);
      
      return task.assignee === 'Jannes' && isWeekday && endHour >= 21;
    });
    
    jannesLateEvenings.forEach(task => {
      warnings.push({
        message: 'Jannes is scheduled after 21:00 on a weekday evening',
        task,
        type: 'jannes-late-evenings'
      });
    });
  });
  
  // 4. Physical BD on days other than Wednesday or Friday
  const physicalBDTasks = tasks.filter(task => 
    task.tags.includes('Physical BD')
  );
  
  physicalBDTasks.forEach(task => {
    const date = parseISO(task.date);
    const dayOfWeek = date.getDay();
    
    if (dayOfWeek !== 3 && dayOfWeek !== 5) { // 3 = Wednesday, 5 = Friday
      warnings.push({
        message: 'Physical-business-dev task scheduled on day other than Wednesday or Friday',
        task,
        type: 'physical-bd-days'
      });
    }
  });
  
  return warnings;
}

// Utils for data exporting and handling
// lib/export.ts
import { Task, Milestone } from './types';
import { createEvents, EventAttributes } from 'ics';

export function exportToICS(tasks: Task[]): string {
  const events: EventAttributes[] = tasks.map(task => {
    const [year, month, day] = task.date.split('-').map(Number);
    const [startHour, startMinute] = task.start.split(':').map(Number);
    const [endHour, endMinute] = task.end.split(':').map(Number);
    
    return {
      title: task.title,
      description: `Assignee: ${task.assignee}\nTags: ${task.tags.join(', ')}\n${task.notes || ''}`,
      start: [year, month, day, startHour, startMinute],
      end: [year, month, day, endHour, endMinute],
      categories: task.tags,
      status: 'CONFIRMED',
      busyStatus: 'BUSY',
    };
  });
  
  const { error, value } = createEvents(events);
  
  if (error) {
    console.error('Error generating ICS:', error);
    return '';
  }
  
  return value || '';
}

export function saveToJSON(data: { tasks: Task[], milestones: Milestone[] }): void {
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = 'podas-planner-export.json';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

export function saveToICS(tasks: Task[]): void {
  const icsContent = exportToICS(tasks);
  const blob = new Blob([icsContent], { type: 'text/calendar' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = 'podas-planner-calendar.ics';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// Load initial data function
// lib/utils.ts
import { Task, Milestone } from './types';

export async function loadInitialData(): Promise<{ tasks: Task[], milestones: Milestone[] }> {
  try {
    const response = await fetch('/initialData.json');
    if (!response.ok) {
      throw new Error('Failed to load initial data');
    }
    return await response.json();
  } catch (error) {
    console.error('Error loading initial data:', error);
    return { tasks: [], milestones: [] };
  }
}

// Now let's create our main components

// components/calendar-view.tsx
'use client';

import { useState, useEffect, useRef } from 'react';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import rrulePlugin from '@fullcalendar/rrule';
import { Task } from '@/lib/types';
import { usePlannerStore } from '@/lib/store';
import { TaskForm } from './task-form';
import { Dialog, DialogContent } from './ui/dialog';
import { Alert, AlertDescription } from './ui/alert';
import { X } from 'lucide-react';
import { Button } from './ui/button';
import { motion, AnimatePresence } from 'framer-motion';

export function CalendarView() {
  const { tasks, warnings, updateTask, dismissWarning, view, setView } = usePlannerStore();
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const calendarRef = useRef<FullCalendar | null>(null);
  
  // Convert tasks to FullCalendar events
  const events = tasks.map(task => {
    const taskWarnings = warnings.filter(w => w.task.id === task.id);
    return {
      id: task.id,
      title: `${task.title} (${task.assignee})`,
      start: `${task.date}T${task.start}`,
      end: `${task.date}T${task.end}`,
      extendedProps: {
        ...task,
        hasWarnings: taskWarnings.length > 0
      }
    };
  });
  
  const handleEventClick = (info: any) => {
    const task = tasks.find(t => t.id === info.event.id);
    if (task) {
      setSelectedTask(task);
      setIsFormOpen(true);
    }
  };
  
  const handleDateSelect = (info: any) => {
    const defaultTask: Omit<Task, 'id'> = {
      title: 'New Task',
      assignee: 'Vincent',
      date: info.startStr.split('T')[0],
      start: info.startStr.includes('T') ? info.startStr.split('T')[1].substring(0, 5) : '09:00',
      end: info.endStr.includes('T') ? info.endStr.split('T')[1].substring(0, 5) : '10:00',
      tags: [],
    };
    
    setSelectedTask({ ...defaultTask, id: 'new' });
    setIsFormOpen(true);
  };
  
  const handleEventDrop = (info: any) => {
    const taskId = info.event.id;
    const newDate = info.event.startStr.split('T')[0];
    const newStart = info.event.startStr.split('T')[1]?.substring(0, 5) || '00:00';
    const newEnd = info.event.endStr.split('T')[1]?.substring(0, 5) || '23:59';
    
    updateTask(taskId, {
      date: newDate,
      start: newStart,
      end: newEnd
    });
  };
  
  const closeForm = () => {
    setIsFormOpen(false);
    setSelectedTask(null);
  };
  
  useEffect(() => {
    if (calendarRef.current) {
      const calendarApi = calendarRef.current.getApi();
      
      if (view === 'day') {
        calendarApi.changeView('timeGridDay');
      } else if (view === 'week') {
        calendarApi.changeView('timeGridWeek');
      } else if (view === 'month') {
        calendarApi.changeView('dayGridMonth');
      }
    }
  }, [view]);
  
  return (
    <div className="h-full flex flex-col">
      <AnimatePresence>
        {warnings.length > 0 && (
          <motion.div 
            className="mb-4 space-y-2"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
          >
            {warnings.map((warning, index) => (
              <Alert key={`${warning.task.id}-${warning.type}-${index}`} className="bg-orange-50 border-orange-200">
                <AlertDescription className="flex justify-between items-center">
                  <span>{warning.message}</span>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={() => dismissWarning(warning.task.id, warning.type)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </AlertDescription>
              </Alert>
            ))}
          </motion.div>
        )}
      </AnimatePresence>
      
      <div className="flex-grow">
        <FullCalendar
          ref={calendarRef}
          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, rrulePlugin]}
          initialView={view === 'month' ? 'dayGridMonth' : view === 'day' ? 'timeGridDay' : 'timeGridWeek'}
          headerToolbar={{
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
          }}
          events={events}
          eventClick={handleEventClick}
          selectable={true}
          select={handleDateSelect}
          editable={true}
          eventDrop={handleEventDrop}
          height="100%"
          firstDay={1} // Monday as first day
          eventContent={(eventInfo) => {
            const task = eventInfo.event.extendedProps as Task & { hasWarnings: boolean };
            
            return (
              <div className={`p-1 h-full overflow-hidden ${task.hasWarnings ? 'border-l-4 border-l-orange-500' : ''}`}>
                <div className="font-semibold text-xs truncate">{eventInfo.event.title}</div>
                <div className="text-xs opacity-80 truncate">
                  {task.tags.join(', ')}
                </div>
              </div>
            );
          }}
          eventClassNames={(info) => {
            const task = info.event.extendedProps as Task;
            let bgColor = '';
            
            if (task.assignee === 'Vincent') bgColor = 'bg-blue-100 border-blue-200';
            else if (task.assignee === 'Jannes') bgColor = 'bg-green-100 border-green-200';
            else if (task.assignee === 'Joy') bgColor = 'bg-purple-100 border-purple-200';
            else bgColor = 'bg-gray-100 border-gray-200';
            
            return `${bgColor} border`;
          }}
        />
      </div>
      
      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        <DialogContent className="max-w-md">
          {selectedTask && (
            <TaskForm task={selectedTask} onClose={closeForm} />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}

// components/gantt-view.tsx
'use client';

import { useEffect, useState } from 'react';
import { usePlannerStore } from '@/lib/store';
import { Task, Milestone } from '@/lib/types';
import { 
  Timeline, 
  TimelineItem, 
  TimelineSeparator, 
  TimelineConnector, 
  TimelineContent, 
  TimelineDot 
} from '@mui/lab';
import { parseISO, format, addMonths } from 'date-fns';
import { motion } from 'framer-motion';

export function GanttView() {
  const { tasks, milestones } = usePlannerStore();
  const [timelineItems, setTimelineItems] = useState<Array<{id: string, date: Date, type: 'task' | 'milestone', data: Task | Milestone}>>([]);

  useEffect(() => {
    // Combine tasks and milestones for timeline
    const items = [
      ...tasks.map(task => ({
        id: task.id,
        date: parseISO(task.date),
        type: 'task' as const,
        data: task
      })),
      ...milestones.map(milestone => ({
        id: milestone.id,
        date: parseISO(milestone.targetDate),
        type: 'milestone' as const,
        data: milestone
      }))
    ];
    
    // Sort by date
    items.sort((a, b) => a.date.getTime() - b.date.getTime());
    
    setTimelineItems(items);
  }, [tasks, milestones]);

  // Group items by month
  const itemsByMonth: Record<string, typeof timelineItems> = {};
  
  timelineItems.forEach(item => {
    const monthKey = format(item.date, 'yyyy-MM');
    if (!itemsByMonth[monthKey]) {
      itemsByMonth[monthKey] = [];
    }
    itemsByMonth[monthKey].push(item);
  });

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6">Timeline / Roadmap</h2>
      
      {Object.entries(itemsByMonth).map(([monthKey, items], monthIndex) => {
        const monthDate = parseISO(`${monthKey}-01`);
        
        return (
          <div key={monthKey} className="mb-8">
            <h3 className="text-xl font-semibold mb-3">
              {format(monthDate, 'MMMM yyyy')}
            </h3>
            
            <Timeline position="alternate">
              {items.map((item, itemIndex) => (
                <TimelineItem key={item.id}>
                  <TimelineSeparator>
                    <motion.div
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      transition={{ delay: itemIndex * 0.1 }}
                    >
                      <TimelineDot 
                        color={item.type === 'milestone' ? 'primary' : 
                          (item.data as Task).assignee === 'Vincent' ? 'info' : 
                          (item.data as Task).assignee === 'Jannes' ? 'success' : 
                          (item.data as Task).assignee === 'Joy' ? 'secondary' : 'grey'
                        }
                        variant={item.type === 'milestone' ? 'filled' : 'outlined'}
                      />
                    </motion.div>
                    {itemIndex < items.length - 1 && <TimelineConnector />}
                  </TimelineSeparator>
                  
                  <TimelineContent>
                    <motion.div
                      initial={{ y: 20, opacity: 0 }}
                      animate={{ y: 0, opacity: 1 }}
                      transition={{ delay: itemIndex * 0.1 + 0.1 }}
                      className="p-3 border rounded shadow-sm mb-4"
                    >
                      <p className="font-semibold">
                        {item.type === 'milestone' 
                          ? (item.data as Milestone).title
                          : (item.data as Task).title
                        }
                      </p>
                      
                      <p className="text-sm text-gray-600">
                        {format(item.date, 'dd MMM yyyy')}
                        {item.type === 'task' && ` (${(item.data as Task).start} - ${(item.data as Task).end})`}
                      </p>
                      
                      {item.type === 'task' && (
                        <p className="text-xs bg-gray-100 rounded px-2 py-1 mt-1 inline-block">
                          {(item.data as Task).assignee}
                        </p>
                      )}
                      
                      {item.type === 'milestone' && (
                        <p className="text-xs mt-1">
                          KPI: {(item.data as Milestone).kpi}
                        </p>
                      )}
                    </motion.div>
                  </TimelineContent>
                </TimelineItem>
              ))}
            </Timeline>
          </div>
        );
      })}
    </div>
  );
}

// components/milestone-panel.tsx
'use client';

import { useState } from 'react';
import { usePlannerStore } from '@/lib/store';
import { Dialog, DialogContent } from './ui/dialog';
import { MilestoneForm } from './milestone-form';
import { Button } from './ui/button';
import { parseISO, format, isAfter } from 'date-fns';
import { Plus, Calendar, Flag, Target } from 'lucide-react';
import { motion } from 'framer-motion';

export function MilestonePanel() {
  const { milestones } = usePlannerStore();
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [selectedMilestone, setSelectedMilestone] = useState<any>(null);
  
  // Sort milestones by target date
  const sortedMilestones = [...milestones].sort((a, b) => {
    return parseISO(a.targetDate).getTime() - parseISO(b.targetDate).getTime();
  });
  
  const today = new Date();
  
  const openNewMilestoneForm = () => {
    setSelectedMilestone({ id: 'new' });
    setIsFormOpen(true);
  };
  
  const openEditMilestoneForm = (milestone: any) => {
    setSelectedMilestone(milestone);
    setIsFormOpen(true);
  };
  
  const closeForm = () => {
    setIsFormOpen(false);
    setSelectedMilestone(null);
  };
  
  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Milestones</h2>
        <Button onClick={openNewMilestoneForm} className="bg-[#0C1F52] hover:bg-[#0C1F52]/80">
          <Plus className="mr-2 h-4 w-4" /> Add Milestone
        </Button>
      </div>
      
      <div className="space-y-4">
        {sortedMilestones.map((milestone, index) => {
          const targetDate = parseISO(milestone.targetDate);
          const isPast = isAfter(today, targetDate);
          
          return (
            <motion.div
              key={milestone.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`p-4 border rounded-lg shadow-sm cursor-pointer hover:shadow-md transition-shadow ${
                isPast ? 'bg-gray-50' : 'bg-white'
              }`}
              onClick={() => openEditMilestoneForm(milestone)}
            >
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="font-bold text-lg">{milestone.title}</h3>
                  <div className="flex items-center text-sm text-gray-600 mt-1">
                    <Calendar className="h-4 w-4 mr-1" />
                    <span>
                      {format(targetDate, 'dd MMM yyyy')}
                      {isPast && ' (past)'}
                    </span>
                  </div>
                </div>
                <div className="flex space-x-2">
                  <div className="bg-[#F26E22] text-white text-xs py-1 px-2 rounded-full flex items-center">
                    <Target className="h-3 w-3 mr-1" />
                    <span>Milestone</span>
                  </div>
                </div>
              </div>
              
              <div className="mt-3">
                <div className="bg-gray-50 p-2 rounded text-sm">
                  <div className="font-medium text-[#0C1F52] flex items-center">
                    <Flag className="h-4 w-4 mr-1" />
                    KPI: {milestone.kpi}
                  </div>
                </div>
                
                <p className="text-sm mt-2 text-gray-700">
                  {milestone.description}
                </p>
              </div>
            </motion.div>
          );
        })}
        
        {milestones.length === 0 && (
          <div className="text-center p-8 bg-gray-50 rounded-lg border border-dashed">
            <p className="text-gray-500">No milestones yet. Add your first milestone!</p>
          </div>
        )}
      </div>
      
      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
        <DialogContent className="max-w-md">
          {selectedMilestone && (
            <MilestoneForm milestone={selectedMilestone} onClose={closeForm} />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}

// components/task-form.tsx
'use client';

import { useState, useEffect } from 'react';
import { usePlannerStore } from '@/lib/store';
import { Task } from '@/lib/types';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { DialogHeader, DialogTitle, DialogFooter } from './ui/dialog';
import { Label } from './ui/label';
import { Checkbox } from './ui/checkbox';
import { format } from 'date-fns';
import { CalendarIcon, Trash2 } from 'lucide-react';
import { Calendar } from './ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from './ui/popover';

interface TaskFormProps {
  task: Task | { id: string };
  onClose: () => void;
}

const availableTags = [
  'Physical BD',
  'Cold-call',
  'Marketing',
  'Build',
  'Admin',
  'Content',
  'Networking',
  'Tooling',
  'Referral',
  'Audit'
];

export function TaskForm({ task, onClose }: TaskFormProps) {
  const { addTask, updateTask, deleteTask } = usePlannerStore();
  const isNewTask = task.id === 'new';
  
  const [formData, setFormData] = useState<Omit<Task, 'id'>>({
    title: '',
    assignee: 'Vincent',
    date: format(new Date(), 'yyyy-MM-dd'),
    start: '09:00',
    end: '10:00',
    tags: [],
    notes: '',
  });
  
  // Initialize form with task data if editing
  useEffect(() => {
    if (!isNewTask && 'title' in task) {
      setFormData({
        title: task.title,
        assignee: task.assignee,
        date: task.date,
        start: task.start,
        end: task.end,
        tags: task.tags,
        notes: task.notes || '',
        rrule: task.rrule,
      });
    }
  }, [task, isNewTask]);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleDateChange = (date: Date | undefined) => {
    if (date) {
      setFormData(prev => ({ ...prev, date: format(date, 'yyyy-MM-dd') }));
    }
  };
  
  const handleTagToggle = (tag: string) => {
    setFormData(prev => {
      const newTags = prev.tags.includes(tag)
        ? prev.tags.filter(t => t !== tag)
        : [...prev.tags, tag];
      
      return { ...prev, tags: newTags };
    });
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isNewTask) {
      addTask(formData);
    } else {
      updateTask(task.id, formData);
    }
    
    onClose();
  };
  
  const handleDelete = () => {
    if (!isNewTask) {
      deleteTask(task.id);
      onClose();
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <DialogHeader>
        <DialogTitle>{isNewTask ? 'Add New Task' : 'Edit Task'}</DialogTitle>
      </DialogHeader>
      
      <div className="grid gap-4 py-4">
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="title" className="text-right">Title</Label>
          <Input
            id="title"
            name="title"
            value={formData.title}
            onChange={handleInputChange}
            className="col-span-3"
            required
          />
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="assignee" className="text-right">Assignee</Label>
          <Select
            value={formData.assignee}
            onValueChange={value => handleSelectChange('assignee', value)}
          >
            <SelectTrigger className="col-span-3">
              <SelectValue placeholder="Select assignee" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Vincent">Vincent</SelectItem>
              <SelectItem value="Jannes">Jannes</SelectItem>
              <SelectItem value="Joy">Joy</SelectItem>
              <SelectItem value="Partners">Partners</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label className="text-right">Date</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className="col-span-3 justify-start text-left font-normal"
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {formData.date}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={new Date(formData.date)}
                onSelect={handleDateChange}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="start" className="text-right">Start Time</Label>
          <Input
            id="start"
            name="start"
            type="time"
            value={formData.start}
            onChange={handleInputChange}
            className="col-span-3"
            required
          />
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="end" className="text-right">End Time</Label>
          <Input
            id="end"
            name="end"
            type="time"
            value={formData.end}
            onChange={handleInputChange}
            className="col-span-3"
            required
          />
        </div>
        
        <div className="grid grid-cols-4 items-start gap-4">
          <Label className="text-right pt-2">Tags</Label>
          <div className="col-span-3 flex flex-wrap gap-2">
            {availableTags.map(tag => (
              <div key={tag} className="flex items-center space-x-2">
                <Checkbox
                  id={`tag-${tag}`}
                  checked={formData.tags.includes(tag)}
                  onCheckedChange={() => handleTagToggle(tag)}
                />
                <label
                  htmlFor={`tag-${tag}`}
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  {tag}
                </label>
              </div>
            ))}
          </div>
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="notes" className="text-right">Notes</Label>
          <Textarea
            id="notes"
            name="notes"
            value={formData.notes || ''}
            onChange={handleInputChange}
            className="col-span-3"
            rows={3}
          />
        </div>
      </div>
      
      <DialogFooter>
        {!isNewTask && (
          <Button type="button" variant="destructive" onClick={handleDelete} className="mr-auto">
            <Trash2 className="mr-2 h-4 w-4" />
            Delete
          </Button>
        )}
        <Button type="button" variant="outline" onClick={onClose}>
          Cancel
        </Button>
        <Button type="submit" className="bg-[#0C1F52] hover:bg-[#0C1F52]/80">
          {isNewTask ? 'Add Task' : 'Save Changes'}
        </Button>
      </DialogFooter>
    </form>
  );
}

// components/milestone-form.tsx
'use client';

import { useState, useEffect } from 'react';
import { usePlannerStore } from '@/lib/store';
import { Milestone } from '@/lib/types';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { DialogHeader, DialogTitle, DialogFooter } from './ui/dialog';
import { Label } from './ui/label';
import { format } from 'date-fns';
import { CalendarIcon, Trash2 } from 'lucide-react';
import { Calendar } from './ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from './ui/popover';

interface MilestoneFormProps {
  milestone: Milestone | { id: string };
  onClose: () => void;
}

export function MilestoneForm({ milestone, onClose }: MilestoneFormProps) {
  const { addMilestone, updateMilestone, deleteMilestone } = usePlannerStore();
  const isNewMilestone = milestone.id === 'new';
  
  const [formData, setFormData] = useState<Omit<Milestone, 'id'>>({
    title: '',
    targetDate: format(new Date(), 'yyyy-MM-dd'),
    kpi: '',
    description: '',
  });
  
  // Initialize form with milestone data if editing
  useEffect(() => {
    if (!isNewMilestone && 'title' in milestone) {
      setFormData({
        title: milestone.title,
        targetDate: milestone.targetDate,
        kpi: milestone.kpi,
        description: milestone.description,
      });
    }
  }, [milestone, isNewMilestone]);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleDateChange = (date: Date | undefined) => {
    if (date) {
      setFormData(prev => ({ ...prev, targetDate: format(date, 'yyyy-MM-dd') }));
    }
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isNewMilestone) {
      addMilestone(formData);
    } else {
      updateMilestone(milestone.id, formData);
    }
    
    onClose();
  };
  
  const handleDelete = () => {
    if (!isNewMilestone) {
      deleteMilestone(milestone.id);
      onClose();
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <DialogHeader>
        <DialogTitle>{isNewMilestone ? 'Add New Milestone' : 'Edit Milestone'}</DialogTitle>
      </DialogHeader>
      
      <div className="grid gap-4 py-4">
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="title" className="text-right">Title</Label>
          <Input
            id="title"
            name="title"
            value={formData.title}
            onChange={handleInputChange}
            className="col-span-3"
            required
          />
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label className="text-right">Target Date</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className="col-span-3 justify-start text-left font-normal"
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {formData.targetDate}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={new Date(formData.targetDate)}
                onSelect={handleDateChange}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="kpi" className="text-right">KPI</Label>
          <Input
            id="kpi"
            name="kpi"
            value={formData.kpi}
            onChange={handleInputChange}
            className="col-span-3"
            required
          />
        </div>
        
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="description" className="text-right">Description</Label>
          <Textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            className="col-span-3"
            rows={3}
            required
          />
        </div>
      </div>
      
      <DialogFooter>
        {!isNewMilestone && (
          <Button type="button" variant="destructive" onClick={handleDelete} className="mr-auto">
            <Trash2 className="mr-2 h-4 w-4" />
            Delete
          </Button>
        )}
        <Button type="button" variant="outline" onClick={onClose}>
          Cancel
        </Button>
        <Button type="submit" className="bg-[#0C1F52] hover:bg-[#0C1F52]/80">
          {isNewMilestone ? 'Add Milestone' : 'Save Changes'}
        </Button>
      </DialogFooter>
    </form>
  );
}

// components/constraints-checker.tsx
'use client';

import { useEffect } from 'react';
import { usePlannerStore } from '@/lib/store';
import { checkConstraints } from '@/lib/constraints';
import { toast } from '@/components/ui/use-toast';

export function ConstraintsChecker() {
  const { tasks, warnings } = usePlannerStore();
  
  useEffect(() => {
    // When warnings change, show toasts for any new warnings
    warnings.forEach(warning => {
      toast({
        title: 'Scheduling Constraint',
        description: warning.message,
        variant: 'warning',
      });
    });
  }, [warnings]);
  
  return null; // This is a non-visual component
}

// components/theme-toggle.tsx
'use client';

import { useTheme } from 'next-themes';
import { Button } from './ui/button';
import { Moon, Sun } from 'lucide-react';

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  
  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      aria-label="Toggle theme"
    >
      <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
    </Button>
  );
}

// Now let's implement our main layout and page components

// app/providers.tsx
'use client';

import { ThemeProvider } from 'next-themes';
import { Toaster } from '@/components/ui/toaster';

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider attribute="class" defaultTheme="light">
      {children}
      <Toaster />
    </ThemeProvider>
  );
}

// app/layout.tsx
import './globals.css';
import { Providers } from './providers';
import { Poppins } from 'next/font/google';

const poppins = Poppins({
  subsets: ['latin'],
  weight: ['400', '500', '600', '700'],
  variable: '--font-poppins',
});

export const metadata = {
  title: 'PODAS Planner',
  description: 'Task and milestone planning tool for PODAS',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${poppins.variable} font-sans`}>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}

// app/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { CalendarView } from '@/components/calendar-view';
import { GanttView } from '@/components/gantt-view';
import { MilestonePanel } from '@/components/milestone-panel';
import { ThemeToggle } from '@/components/theme-toggle';
import { ConstraintsChecker } from '@/components/constraints-checker';
import { usePlannerStore } from '@/lib/store';
import { loadInitialData } from '@/lib/utils';
import { saveToJSON, saveToICS } from '@/lib/export';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { CalendarRange, Calendar as CalendarIcon, Gantt, Milestone } from 'lucide-react';
import { useTheme } from 'next-themes';
import { motion } from 'framer-motion';
import Image from 'next/image';

export default function Home() {
  const { tasks, milestones, view, setView, importData, exportData } = usePlannerStore();
  const [activeTab, setActiveTab] = useState<string>('calendar');
  const [isClient, setIsClient] = useState(false);
  const { theme } = useTheme();

  useEffect(() => {
    setIsClient(true);
    
    // Load initial data if store is empty
    const checkAndLoadInitialData = async () => {
      if (tasks.length === 0 && milestones.length === 0) {
        try {
          const data = await loadInitialData();
          importData(data);
        } catch (error) {
          console.error('Failed to load initial data:', error);
        }
      }
    };
    
    checkAndLoadInitialData();
  }, [importData, tasks.length, milestones.length]);
  
  const handleTabChange = (value: string) => {
    setActiveTab(value);
    if (value === 'calendar') {
      setView('week');
    } else if (value === 'timeline') {
      setView('timeline');
    }
  };
  
  const handleExportICS = () => {
    saveToICS(tasks);
  };
  
  const handleExportJSON = () => {
    saveToJSON(exportData());
  };
  
  const handleImportJSON = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'application/json';
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (event) => {
          try {
            const data = JSON.parse(event.target?.result as string);
            importData(data);
          } catch (error) {
            console.error('Error parsing JSON:', error);
            alert('Failed to parse JSON file');
          }
        };
        reader.readAsText(file);
      }
    };
    input.click();
  };
  
  if (!isClient) {
    return null; // Prevent hydration mismatch
  }
  
  return (
    <div className="min-h-screen bg-background">
      <ConstraintsChecker />
      
      <header className="border-b">
        <div className="container mx-auto py-4 px-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 relative">
              <Image 
                src="/podas-logo.svg" 
                alt="PODAS Logo" 
                fill 
                priority
                className="object-contain"
              />
            </div>
            <h1 className="text-2xl font-bold text-[#0C1F52]">
              <span>PODAS</span>
              <span className="text-[#F26E22] ml-1">Planner</span>
            </h1>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={handleExportICS}
              className="text-xs"
            >
              Export .ics
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={handleExportJSON}
              className="text-xs"
            >
              Export JSON
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={handleImportJSON}
              className="text-xs"
            >
              Import JSON
            </Button>
            <ThemeToggle />
          </div>
        </div>
      </header>
      
      <main className="container mx-auto py-6 px-4">
        <Tabs
          defaultValue="calendar"
          value={activeTab}
          onValueChange={handleTabChange}
          className="w-full"
        >
          <TabsList className="grid w-full max-w-md mx-auto grid-cols-3 mb-8">
            <TabsTrigger value="calendar" className="flex items-center gap-2">
              <CalendarIcon className="h-4 w-4" />
              <span>Calendar</span>
            </TabsTrigger>
            <TabsTrigger value="timeline" className="flex items-center gap-2">
              <Gantt className="h-4 w-4" />
              <span>Timeline</span>
            </TabsTrigger>
            <TabsTrigger value="milestones" className="flex items-center gap-2">
              <Milestone className="h-4 w-4" />
              <span>Milestones</span>
            </TabsTrigger>
          </TabsList>
          
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <TabsContent value="calendar" className="mt-0">
              <div className="h-[calc(100vh-12rem)] bg-card rounded-lg shadow-sm border p-4">
                <CalendarView />
              </div>
            </TabsContent>
            
            <TabsContent value="timeline" className="mt-0">
              <div className="min-h-[calc(100vh-12rem)] bg-card rounded-lg shadow-sm border">
                <GanttView />
              </div>
            </TabsContent>
            
            <TabsContent value="milestones" className="mt-0">
              <div className="min-h-[calc(100vh-12rem)] bg-card rounded-lg shadow-sm border">
                <MilestonePanel />
              </div>
            </TabsContent>
          </motion.div>
        </Tabs>
      </main>
    </div>
  );
}

// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222 75% 19%;  /* #0C1F52 */
    --primary-foreground: 210 40% 98%;
    --secondary: 24 91% 54%; /* #F26E22 */
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222 75% 19%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 24 91% 54%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
    font-family: var(--font-poppins), system-ui, sans-serif;
  }
}

.fc .fc-button-primary {
  @apply bg-primary border-primary hover:bg-primary/90 hover:border-primary/90;
}

.fc .fc-button-primary:not(:disabled).fc-button-active,
.fc .fc-button-primary:not(:disabled):active {
  @apply bg-primary/80 border-primary/80;
}

.fc .fc-daygrid-day.fc-day-today,
.fc .fc-timegrid-col.fc-day-today {
  @apply bg-secondary/10;
}

.fc .fc-highlight {
  @apply bg-primary/20;
}

/* FullCalendar custom styles */
.fc-event {
  @apply cursor-pointer rounded-md overflow-hidden border;
}

.fc-h-event .fc-event-main {
  @apply p-1;
}

.fc .fc-toolbar-title {
  @apply text-xl md:text-2xl;
}

.fc .fc-button {
  @apply text-xs md:text-sm py-1 px-2 md:py-1.5 md:px-3;
}

.fc .fc-col-header-cell-cushion,
.fc .fc-daygri
